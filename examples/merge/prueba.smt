(declare-fun arr_length () Int)
(declare-fun res_in_length () Int)
(declare-fun resp_length () Int)
(declare-fun _NU_49_length () Int)
(declare-fun a () Int)
(declare-fun m () Int)
(declare-fun b () Int)
(declare-fun arr () (Array Int Int))
(declare-fun cm () Int)
(declare-fun res_in () (Array Int Int))
(declare-fun b_1 () Bool)
(declare-fun arr_cm () Int)
(declare-fun resp () (Array Int Int))
(declare-fun cmp () Int)
(declare-fun _NU_49 () (Array Int Int))
(assert (>= arr_length 0))
(assert (>= res_in_length 0))
(assert (>= resp_length 0))
(assert (>= _NU_49_length 0))
(assert (<= 0 a))
(assert (<= a m))
(assert (<= m b))
(assert (let ((a!1 (forall ((i Int) (j Int))
             (=> (and (<= a i) (<= i j) (< j m))
                 (<= (select arr i) (select arr j)))))
      (a!2 (forall ((i Int) (j Int))
             (=> (and (<= m i) (<= i j) (< j b))
                 (<= (select arr i) (select arr j))))))
  (and a!1 a!2 (<= b arr_length))))
(assert (and (<= 0 cm) (<= cm b)))
(assert (let ((a!1 (forall ((i Int) (j Int))
             (=> (and (<= a i) (< i cm) (<= cm j) (< j b))
                 (<= (select res_in i) (select arr j)))))
      (a!2 (forall ((i Int) (j Int))
             (=> (and (<= a i) (<= i j) (< j cm))
                 (<= (select res_in i) (select res_in j))))))
  (and (= res_in_length arr_length) a!1 a!2)))
(assert (= b_1 (< cm b)))
(assert b_1)
(assert (<= m cm))
(assert (= arr_cm (select arr cm)))
(assert (and (= resp (store res_in cm arr_cm)) (= resp_length res_in_length)))
(assert (let ((a!1 (forall ((i Int) (j Int))
             (=> (and (<= a i) (< i (+ cm 1)) (<= (+ cm 1) j) (< j b))
                 (<= arr_cm (select arr j)))))
      )
  (not (and  a!1))))
(check-sat)  