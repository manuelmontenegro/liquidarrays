(verification-unit "merge"
		   :documentation "This is the implementation of a verified merge algorithm in CLIR"
       :external (set-array ((xs (array int))
                             (i (qual nu int (and (@ <= (the int 0) nu) (@ < nu (@ len xs)))))
                             (nv int))
                            ((res (qual nu (array int) (and (@ =[] nu (@ set-array xs i nv)) (@ = (@ len nu) (@ len xs)))))))
       :external (get-array ((xs (array int))
                             (i (qual nu int (and (@ <= (the int 0) nu) (@ < nu (@ len xs))))))
                            ((res (qual nu int (@ = nu (@ get-array xs i))))))
       :qset (Q )
       :qset (QI i )
       :qset (QE i )
       :qset (QII i j 
                      (nu (array int) () (@ <= i j))
                      (nu (array int) ((* int)) (@ <= * i))
                      (nu (array int) ((* int)) (@ < i *))
                      (nu (array int) ((* int)) (@ <= * j))
                      (nu (array int) ((* int)) (@ < j *))
                      )
       :qset (QEE i j (nu (array int) () (@ <= (@ get-array nu i) (@ get-array nu j))) 
                      (nu (array int) ((* (array int))) (@ <= (@ get-array nu i) (@ get-array * j))))
       :qset (QLen (nu (array int) ((* int)) (@ <= * (@ len nu))) (nu (array int) ((* (array int))) (@ = (@ len nu) (@ len *)))))



(define f3
      ( (a (qual nu int (@ <= (the int 0) nu)))
        (m (qual nu int (@ <= a nu)))
        (b (qual nu int (@ <= m nu)))
        (arr (qual nu (array int) (and
          (forall ((i int) (j int)) (-> (and (@ <= a i) (@ <= i j) (@ < j m)) (@ <= (@ get-array nu i) (@ get-array nu j))))
          (forall ((i int) (j int)) (-> (and (@ <= m i) (@ <= i j) (@ < j b)) (@ <= (@ get-array nu i) (@ get-array nu j))))
          (@ <= b (@ len nu))
        )
      ))
        (ca (qual nu int (and (@ <= a nu) (@ <= nu m))))
           (k (qual nu int (@ = (@ + nu m) (@ + ca b))))
           (res_in (array int))) 
            
          ((res_out (qual nu (array int) (and 
              (@ = (@ len nu) (@ len arr))
              (forall ((i int) (j int)) (-> (and (@ <= a i) (@ <= i j) (@ < j b)) (@ <= (@ get-array nu i) (@ get-array nu j))))
          )))) 
          
        (declare (assertion
          (precd (and 
          
                (@ <= (the int 0) a)
                (@ <= a m)
                (@ <= m b)
                (@ <= b (@ len arr))
                (forall ((i int) (j int)) (-> (and (@ <= a i) (@ <= i j) (@ < j m)) (@ <= (@ get-array arr i) (@ get-array arr j))))
                (forall ((i int) (j int)) (-> (and (@ <= m i) (@ <= i j) (@ < j b)) (@ <= (@ get-array arr i) (@ get-array arr j))))          
                (and (@ <= a ca) (@ <= ca m)) (@ = (@ + k m) (@ + ca b)) 
                (@ = (@ len res_in) (@ len arr))
                (forall ((i int) (j int)) (-> (and (@ <= a i) (@ < i k) (@ <= ca j) (@ < j m)) (@ <= (@ get-array res_in i) (@ get-array arr j))))
                (forall ((i int) (j int)) (-> (and (@ <= a i) (@ <= i j) (@ < j k)) (@ <= (@ get-array res_in i) (@ get-array res_in j))))
                ))
          (postcd (and 
              (@ = (@ len res_out) (@ len arr))
              (forall ((i int) (j int)) (-> (and (@ <= a i) (@ <= i j) (@ < j b)) (@ <= (@ get-array res_out i) (@ get-array res_out j))))
          ))))
        
        (let ((b4 bool)) (@ < ca m) (case b4 (
          (true 
            (let ((arr_ca int)) (@ get-array arr ca) 
            (let ((resp (array int))) (@ set-array res_in k arr_ca) 
            (let ((kp int)) (@ + k (the int 1))
            (let ((cap int)) (@ + ca (the int 1))
            (@ f3 a m b arr cap kp resp))))))
          (false res_in)
        )))
      )
      
       
       
