(verification-unit "merge"
		   :documentation "This is the implementation of a verified merge algorithm in CLIR"
       :external (set-array ((xs (array int))
                             (i (qual nu int (and (@ <= (the int 0) nu) (@ < nu (@ len xs)))))
                             (nv int))
                            ((res (qual nu (array int) (and (@ =[] nu (@ set-array xs i nv)) (@ = (@ len nu) (@ len xs)))))))
       :external (get-array ((xs (array int))
                             (i (qual nu int (and (@ <= (the int 0) nu) (@ < nu (@ len xs))))))
                            ((res (qual nu int (@ = nu (@ get-array xs i))))))
       :qset (Q (nu int () (@ <= (the int 0) nu)) (nu int ((* int)) (@ <= * nu)))
       :qset (QI i (nu (array int) () (@ <= (the int 0) i))
                   (nu (array int) ((* int)) (@ < i *))
                   (nu (array int) ((* int)) (@ <= * i))
                   (nu (array int) () (@ < i (@ len nu))))
       :qset (QE i (nu (array int) ((* (array int))) (@ = (@ get-array nu i) (@ get-array * i))))
       :qset (QII i j (nu (array int) () (@ <= (the int 0) i))
                      (nu (array int) () (@ <= i j))
                      (nu (array int) ((* int)) (@ <= * i))
                      (nu (array int) ((* int)) (@ < i *))
                      (nu (array int) ((* int)) (@ <= * j))
                      (nu (array int) ((* int)) (@ < j *))
                      (nu (array int) () (@ < j (@ len nu))))
       :qset (QEE i j (nu (array int) () (@ <= (@ get-array nu i) (@ get-array nu j))))
       :qset (QLen (nu (array int) ((* int)) (@ <= * (@ len nu))) (nu (array int) ((* (array int))) (@ = (@ len *) (@ len nu)))))



(define merge
    ((a (qual nu int (@ <= (the int 0) nu)))
     (m (qual nu int (@ <= a nu)))
     (b (qual nu int (@ <= m nu)))
     (arr (qual nu (array int) (and
          (forall ((i int) (j int)) (-> (and (@ <= a i) (@ <= i j) (@ < j m)) (@ <= (@ get-array nu i) (@ get-array nu j))))
          (forall ((i int) (j int)) (-> (and (@ <= m i) (@ <= i j) (@ < j b)) (@ <= (@ get-array nu i) (@ get-array nu j))))
          (@ <= b (@ len nu))
        )
      )))
    ((res (qual nu (array int) (and 
        (@ = (@ len nu) (@ len arr))
        (forall ((i int) (j int)) (-> (and (@ <= a i) (@ <= i j) (@ < j b)) (@ <= (@ get-array nu i) (@ get-array nu j))))
    ))))

    (declare (assertion
        (precd (and
            (@ <= (the int 0) a)
            (@ <= a m)
            (@ <= m b)
            (@ <= b (@ len arr))
            (forall ((i int) (j int)) (-> (and (@ <= a i) (@ <= i j) (@ < j m)) (@ <= (@ get-array arr i) (@ get-array arr j))))
            (forall ((i int) (j int)) (-> (and (@ <= m i) (@ <= i j) (@ < j b)) (@ <= (@ get-array arr i) (@ get-array arr j))))
          ))
        (postcd (and 
          (@ = (@ len res) (@ len arr))
          (forall ((i int) (j int)) (-> (and (@ <= a i) (@ <= i j) (@ < j b)) (@ <= (@ get-array res i) (@ get-array res j))))
        ))))
    
    (letfun (
      (f1 ((ca (qual nu int (and (@ <= a nu) (@ <= nu m))))
           (cm (qual nu int (and (@ <= m nu) (@ <= nu b))))
           (k (qual nu int (@ = (@ + nu m) (@ + ca cm))))
           (res_in (qual nu (array int) (and 
              (@ = (@ len nu) (@ len arr))
              (forall ((i int) (j int)) (-> (and (@ <= a i) (@ < i k) (@ <= ca j) (@ < j m)) (@ <= (@ get-array nu i) (@ get-array arr j))))
              (forall ((i int) (j int)) (-> (and (@ <= a i) (@ < i k) (@ <= cm j) (@ < j b)) (@ <= (@ get-array nu i) (@ get-array arr j))))
              (forall ((i int) (j int)) (-> (and (@ <= a i) (@ <= i j) (@ < j k)) (@ <= (@ get-array nu i) (@ get-array nu j))))
            )))) 
          ((res_out (qual nu (array int) (and 
              (@ = (@ len nu) (@ len arr))
              (forall ((i int) (j int)) (-> (and (@ <= a i) (@ <= i j) (@ < j b)) (@ <= (@ get-array nu i) (@ get-array nu j))))
          )))) 
          
          
      (declare (assertion
        (precd false)
        (postcd true)))
        
      (let ((b1 bool)) (@ < ca m) 
      (let ((b2 bool)) (@ < cm b) 
        (case b1 (
          (true (case b2 (
            (true 
              (let ((arr_ca int)) (@ get-array arr ca)
              (let ((arr_cm int)) (@ get-array arr cm)
              (let ((b3 bool)) (@ <= arr_ca arr_cm) 
              (case b3 (
                (true 
                  (let ((resp (array int))) (@ set-array res_in k arr_ca) 
                  (let ((cap int)) (@ + ca (the int 1)) 
                  (let ((kp int)) (@ + k (the int 1)) (@ f1 cap cm kp resp)))))
                (false 
                  (let ((resp (array int))) (@ set-array res_in k arr_cm) 
                    (let ((cmp int)) (@ + cm (the int 1)) 
                    (let ((kp int)) (@ + k (the int 1)) (@ f1 ca cmp kp resp))))))
              )))))
            (false (@ f3 ca k res_in)))
          ))
          (false (@ f2 cm res_in)))
      ))))
      
      (f2 ((cm (qual nu int (and (@ <= m nu) (@ <= nu b))))
           (res_in (qual nu (array int) (and 
              (@ = (@ len nu) (@ len arr))
              (forall ((i int) (j int)) (-> (and (@ <= a i) (@ < i cm) (@ <= cm j) (@ < j b)) (@ <= (@ get-array nu i) (@ get-array arr j))))
              (forall ((i int) (j int)) (-> (and (@ <= a i) (@ <= i j) (@ < j cm)) (@ <= (@ get-array nu i) (@ get-array nu j))))
            )))) 
            
          ((res_out (qual nu (array int) (and 
              (@ = (@ len nu) (@ len arr))
              (forall ((i int) (j int)) (-> (and (@ <= a i) (@ <= i j) (@ < j b)) (@ <= (@ get-array nu i) (@ get-array nu j))))
          )))) 
          
        (declare (assertion
          (precd false)
          (postcd true)))
        
        (let ((b3 bool)) (@ < cm b) (case b3 (
          (true 
            (let ((arr_cm int)) (@ get-array arr cm) 
            (let ((resp (array int))) (@ set-array res_in cm arr_cm) 
            (let ((cmp int)) (@ + cm (the int 1)) 
            (@ f2 cmp resp)))))
          (false res_in)
        ))))
      
      
      (f3 ((ca (qual nu int (and (@ <= a nu) (@ <= nu m))))
           (k (qual nu int (@ = (@ + nu m) (@ + ca b))))
           (res_in (qual nu (array int) (and 
              (@ = (@ len nu) (@ len arr))
              (forall ((i int) (j int)) (-> (and (@ <= a i) (@ < i k) (@ <= ca j) (@ < j m)) (@ <= (@ get-array nu i) (@ get-array arr j))))
              (forall ((i int) (j int)) (-> (and (@ <= a i) (@ <= i j) (@ < j k)) (@ <= (@ get-array nu i) (@ get-array nu j))))
            )))) 
            
          ((res_out (qual nu (array int) (and 
              (@ = (@ len nu) (@ len arr))
              (forall ((i int) (j int)) (-> (and (@ <= a i) (@ <= i j) (@ < j b)) (@ <= (@ get-array nu i) (@ get-array nu j))))
          )))) 
          
        (declare (assertion
          (precd false)
          (postcd true)))
        
        (let ((b4 bool)) (@ < ca m) (case b4 (
          (true 
            (let ((arr_ca int)) (@ get-array arr ca) 
            (let ((resp (array int))) (@ set-array res_in k arr_ca) 
            (let ((kp int)) (@ + k (the int 1))
            (let ((cap int)) (@ + ca (the int 1))
            (@ f3 cap kp resp))))))
          (false res_in)
        ))))
      )
      
    (@ f1 a m a arr)))
       
       
