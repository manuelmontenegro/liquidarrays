(verification-unit "partition"
		   :documentation "This is the implementation of a verified partition algorithm in CLIR"
       :external (set-array ((xs (array int))
                             (i (qual nu int (and (@ <= (the int 0) nu) (@ < nu (@ len xs)))))
                             (nv int))
                            ((res (qual nu (array int) (and (@ =[] nu (@ set-array xs i nv)) (@ = (@ len nu) (@ len xs)))))))
       :external (get-array ((xs (array int))
                             (i (qual nu int (and (@ <= (the int 0) nu) (@ < nu (@ len xs))))))
                            ((res (qual nu int (@ = nu (@ get-array xs i))))))
                            
       :qset (Q (nu int () (@ <= (the int 0) nu)))
       :qset (QI i)
       :qset (QE i)
       :qset (QII i j (nu (array int) () (@ <= i j))
                      (nu (array int) ((* int)) (@ < j *)))
       :qset (QEE i j (nu (array int) () (@ <= (@ get-array nu i) (@ get-array nu j))))
       :qset (QLen (nu (array int) ((* int)) (@ <= * (@ len nu)) (@ < (the int 0) (@ len nu)))))



(define partition
    ((a (qual nu (array int) (@ < (the int 0) (@ len nu)))))
    (
     (pend (qual nu int (@ <= (the int 0) nu))) 
     (res (qual nu (array int) (and 
      (forall ((i int))
        (-> (and (@ <= (the int 0) i) (@ < i pend)) (@ <= (@ get-array nu i) (@ get-array nu pend))))
      (forall ((i int))
        (-> (and (@ <= pend i) (@ < i (@ len nu))) (@ <= (@ get-array nu pend) (@ get-array nu i))))
      (@ <= (the int 0) pend)
      (@ < pend (@ len nu))
     )))
    )

    (declare (assertion
        (precd (@ < (the int 0) (@ len a)))
        (postcd (and 
        
            (forall ((i int))
                (-> (and (@ <= (the int 0) i) (@ < i pend)) (@ <= (@ get-array res i) (@ get-array res pend))))
                
            (forall ((i int))
                (-> (and (@ <= pend i) (@ < i (@ len res))) (@ >= (@ get-array res i) (@ get-array res pend))))
            
            (@ <= (the int 0) pend)

            (@ < pend (@ len res))))))
                
    
    (letfun (
      (partition-rec 
        ((p (qual nu int (@ <= (the int 0) nu))) 
         (l (qual nu int (@ < p nu))) 
         (a (qual nu (array int) (and 
            (forall ((i int))
              (-> (and (@ <= (the int 0) i) (@ < i p)) (@ <= (@ get-array nu i) (@ get-array nu p))))
            (forall ((i int))
              (-> (and (@ <= l i) (@ < i (@ len nu))) (@ <= (@ get-array nu p) (@ get-array nu i))))
            (@ <= l (@ len nu))
         ))))
        ((pend (qual nu int (@ <= (the int 0) nu)))
         (res (qual nu (array int) (and 
            (forall ((i int))
              (-> (and (@ <= (the int 0) i) (@ < i pend)) (@ <= (@ get-array nu i) (@ get-array nu pend))))
            (forall ((i int))
              (-> (and (@ <= pend i) (@ < i (@ len nu))) (@ <= (@ get-array nu pend) (@ get-array nu i))))
            (@ <= (the int 0) pend)
            (@ < pend (@ len nu))
          ))))
        
        (declare (assertion (precd false) (postcd true)))
        
        (let ((p1 int)) (@ + p (the int 1))
         (let ((b bool)) (@ = p1 l)
         (case b (
            (true (tuple p a))
            (false (let ((ap int)) (@ get-array a p)
                   (let ((ap1 int)) (@ get-array a p1)
                   (let ((b1 bool)) (@ > ap ap1)
                   (case b1 (
                      (true (let ((anext1 (array int))) (@ set-array a p ap1) 
                            (let ((anext2 (array int))) (@ set-array anext1 p1 ap)
                            (@ partition-rec p1 l anext2))))
                      (false (let ((l1 int)) (@ - l (the int 1))
                             (let ((al1 int)) (@ get-array a l1)
                             (let ((anext3 (array int))) (@ set-array a p1 al1)
                             (let ((anext4 (array int))) (@ set-array anext3 l1 ap1)
                             (@ partition-rec p l1 anext4))))))
                  ))))))
          ))))))
      
    (let ((la int)) (@ len a) (@ partition-rec (the int 0) la a))))
       
       
