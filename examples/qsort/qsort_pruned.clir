(verification-unit partition :external
  (set-array
    ((xs (array int))
      (i (qual nu int (and (@ <= (the int 0) nu) (@ < nu (@ len xs)))))
      (nv int))
    (
      (res
        (qual nu (array int)
          (and (@ =[] nu (@ set-array xs i nv)) (@ = (@ len nu) (@ len xs)))))))
  :external
  (get-array
    ((xs (array int))
      (i (qual nu int (and (@ <= (the int 0) nu) (@ < nu (@ len xs))))))
    ((res (qual nu int (@ = nu (@ get-array xs i))))))
  :external
  (partition
    ((c (qual nu int (@ <= (the int 0) nu))) (f (qual nu int (@ <= c nu)))
      (a
        (qual nu (array int)
          (and (@ <= f (@ len nu))
            (forall ((i int) (j int))
              (-> (and (@ <= (the int 0) i) (@ < i c) (@ <= c j) (@ < j f))
                (@ <= (@ get-array nu i) (@ get-array nu j))))
            (forall ((i int) (j int))
              (-> (and (@ <= c i) (@ < i f) (@ <= f j) (@ < j (@ len nu)))
                (@ <= (@ get-array nu i) (@ get-array nu j))))))))
    ((pend (qual nu int (and (@ <= c nu) (@ < nu f))))
      (res
        (qual nu (array int)
          (and (@ = (@ len nu) (@ len a))
            (forall ((i int))
              (-> (and (@ <= c i) (@ < i pend))
                (@ <= (@ get-array nu i) (@ get-array nu pend))))
            (forall ((i int))
              (-> (and (@ < pend i) (@ < i f))
                (@ <= (@ get-array nu pend) (@ get-array nu i))))
            (forall ((i int))
              (-> (and (@ <= (the int 0) i) (@ < i c))
                (@ = (@ get-array nu i) (@ get-array a i))))
            (forall ((i int))
              (-> (and (@ <= f i) (@ < i (@ len nu)))
                (@ = (@ get-array nu i) (@ get-array a i))))
            (forall ((i int) (j int))
              (-> (and (@ <= (the int 0) i) (@ < i c) (@ <= c j) (@ < j f))
                (@ = (@ get-array nu i) (@ get-array nu j))))
            (forall ((i int) (j int))
              (-> (and (@ <= c i) (@ < i f) (@ <= f j) (@ < j (@ len nu)))
                (@ = (@ get-array nu i) (@ get-array nu j)))))))))
  :qset
  (Q (nu int () (@ <= (the int 0) nu)) (nu int ((* int)) (@ <= * nu)))
  :qset
  (QI i (nu (array int) () (@ <= (the int 0) i))
    (nu (array int) ((* int)) (@ < i *))
    (nu (array int) ((* int)) (@ <= * i))
    (nu (array int) () (@ < i (@ len nu))))
  :qset
  (QE i
    (nu (array int) ((* (array int)))
      (@ = (@ get-array nu i) (@ get-array * i))))
  :qset
  (QII i j (nu (array int) () (@ <= (the int 0) i))
    (nu (array int) () (@ <= i j))
    (nu (array int) ((* int)) (@ <= * i))
    (nu (array int) ((* int)) (@ < i *))
    (nu (array int) ((* int)) (@ <= * j))
    (nu (array int) ((* int)) (@ < j *))
    (nu (array int) () (@ < j (@ len nu))))
  :qset
  (QEE i j (nu (array int) () (@ <= (@ get-array nu i) (@ get-array nu j))))
  :qset
  (QLen (nu (array int) ((* int)) (@ <= * (@ len nu))))
  :kappa
  (_kappa_qsort-rec_c ((nu int) (a (array int))) (Q (@ <= (the int 0) nu)))
  :kappa
  (_kappa_qsort-rec_f ((nu int) (a (array int)) (c int))
    (Q (@ <= c nu)))
  :mu
  (_mu_qsort_a ((nu (array int)))
    (QI i)
    (QE i)
    (QII i j)
    (QEE i j)
    (QLen))
  :mu
  (_mu_qsort-rec_a ((nu (array int)) (a (array int)) (c int) (f int))
    (QI i)
    (QE i)
    (QII i j (@ <= (the int 0) i) (@ <= c i)
      (@ < i c)
      (@ < i f)
      (@ <= c j)
      (@ <= f j)
      (@ < j f)
      (@ < j (@ len nu)))
    (QEE i j (@ <= (@ get-array nu i) (@ get-array nu j)))
    (QLen (@ <= f (@ len nu))))
  :mu
  (_mu_qsort-rec_res ((nu (array int)) (c int) (f int) (a (array int)))
    (QI i (@ <= (the int 0) i) (@ < i c) (@ <= f i) (@ < i (@ len nu)))
    (QE i (@ = (@ get-array nu i) (@ get-array a i)))
    (QII i j (@ <= (the int 0) i) (@ <= i j) (@ <= c i)
      (@ < i c)
      (@ < i f)
      (@ <= c j)
      (@ <= f j)
      (@ < j f)
      (@ < j (@ len nu)))
    (QEE i j (@ <= (@ get-array nu i) (@ get-array nu j)))
    (QLen (@ = (@ len nu) (@ len a))))
  :mu
  (_mu_qsort_res ((nu (array int)) (a (array int)))
    (QI i)
    (QE i)
    (QII i j (@ <= (the int 0) i) (@ <= i j) (@ < j (@ len nu)))
    (QEE i j (@ <= (@ get-array nu i) (@ get-array nu j)))
    (QLen)))
(define qsort ((a (qual nu (array int) (@ _mu_qsort_a nu))))
  ((res (qual nu (array int) (@ _mu_qsort_res nu a))))
  (declare
    (assertion (precd true)
      (postcd
        (forall ((i int) (j int))
          (-> (and (@ <= (the int 0) i) (@ <= i j) (@ < j (@ len res)))
            (@ <= (@ get-array res i) (@ get-array res j)))))))
  (letfun
    (
      (qsort-rec
        ((c (qual nu int (@ _kappa_qsort-rec_c nu a)))
          (f (qual nu int (@ _kappa_qsort-rec_f nu a c)))
          (a (qual nu (array int) (@ _mu_qsort-rec_a nu a c f))))
        ((res (qual nu (array int) (@ _mu_qsort-rec_res nu c f a))))
        (declare (assertion (precd false) (postcd true)))
        (let ((b bool)) (@ <= f c)
          (case b
            (
              (false
                (let ((p int) (resP (array int))) (@ partition c f a)
                  (let ((q1 (array int))) (@ qsort-rec c p resP)
                    (let ((p1 int)) (@ + p (the int 1))
                      (let ((q2 (array int))) (@ qsort-rec p1 f q1) q2)))))(true a))))))
    (let ((la int)) (@ len a) (@ qsort-rec (the int 0) la a))))
