(verification-unit fill :external
  (set-array
    ((xs (array int))
      (i (qual nu int (and (@ <= (the int 0) nu) (@ < nu (@ len xs)))))
      (nv int))
    (
      (res
        (qual nu (array int)
          (and (@ =[] nu (@ set-array xs i nv)) (@ = (@ len nu) (@ len xs)))))))
  :external
  (get-array
    ((xs (array int))
      (i (qual nu int (and (@ <= (the int 0) nu) (@ < nu (@ len xs))))))
    ((res (qual nu int (@ = nu (@ get-array xs i))))))
  :qset
  (Q (nu int () (@ <= (the int 0) nu))
    (nu int ((* (array int))) (@ < nu (@ len *))))
  :qset
  (QI i (nu (array int) ((* int)) (@ < i *)))
  :qset
  (QE i (nu (array int) ((* int)) (@ = (@ get-array nu i) *)))
  :qset
  (QII i j)
  :qset
  (QEE i j)
  :qset
  (QLen (nu (array int) ((* int)) (@ <= * (@ len nu))))
  :kappa
  (_kappa_fill_elem ((nu int) (xs (array int)))
    (Q ))
  :kappa
  (_kappa_filln_n ((nu int) (xs (array int)) (elem int))
    (Q (@ <= (the int 0) nu) ))
  :kappa
  (_kappa_filln_elem ((nu int) (xs (array int)) (elem int) (n int))
    (Q ))
  :mu
  (_mu_fill_xs ((nu (array int))) (QI i) (QE i) (QII i j) (QEE i j) (QLen))
  :mu
  (_mu_filln_xs ((nu (array int)) (xs (array int)) (n int) (elem int))
    (QI i (@ < i n) )
    (QE i (@ = (@ get-array nu i) n) (@ = (@ get-array nu i) elem))
    (QII i j)
    (QEE i j)
    (QLen ))
  :mu
  (_mu_filln_res ((nu (array int)) (n int) (elem int) (xs (array int)))
    (QI i )
    (QE i (@ = (@ get-array nu i) elem))
    (QII i j)
    (QEE i j)
    (QLen))
  :mu
  (_mu_fill_res ((nu (array int)) (xs (array int)) (elem int))
    (QI i )
    (QE i (@ = (@ get-array nu i) elem))
    (QII i j)
    (QEE i j)
    (QLen )))
(define fill
  ((xs (qual nu (array int) (@ _mu_fill_xs nu)))
    (elem (qual nu int (@ _kappa_fill_elem nu xs))))
  ((res (qual nu (array int) (@ _mu_fill_res nu xs elem))))
  (declare
    (assertion (precd true)
      (postcd
        (forall ((i int))
          (-> (@ <= (the int 0) i)
            (-> (@ < i (@ len res)) (@ = (@ get-array res i) elem)))))))
  (letfun
    (
      (filln
        ((n (qual nu int (@ _kappa_filln_n nu xs elem)))
          (elem (qual nu int (@ _kappa_filln_elem nu xs elem n)))
          (xs (qual nu (array int) (@ _mu_filln_xs nu xs n elem))))
        ((res (qual nu (array int) (@ _mu_filln_res nu n elem xs))))
        (declare (assertion (precd false) (postcd true)))
        (let ((l int)) (@ len xs)
          (let ((b bool)) (@ >= n l)
            (case b
              ((true xs)
                (false
                  (let ((xsp (array int))) (@ set-array xs n elem)
                    (let ((n1 int)) (@ + n (the int 1)) (@ filln n1 elem xsp))))))))))
    (@ filln (the int 0) elem xs)))
