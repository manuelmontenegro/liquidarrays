(verification-unit "selsort"
		   :documentation "This is the implementation of a selection sort in CLIR"
       :external (set-array ((xs (array int))
                             (i (qual nu int (and (@ <= (the int 0) nu) (@ < nu (@ len xs)))))
                             (nv int))
                            ((res (qual nu (array int) (and (@ =[] nu (@ set-array xs i nv)) (@ = (@ len nu) (@ len xs)))))))
       :external (get-array ((xs (array int))
                             (i (qual nu int (and (@ <= (the int 0) nu) (@ < nu (@ len xs))))))
                            ((res (qual nu int (@ = nu (@ get-array xs i))))))
                            
       :external (minimum ((begin (qual nu int (@ <= (the int 0) nu)))
                 (end (qual nu int (@ < begin nu)))
                 (arr (qual nu (array int) (@ <= end (@ len nu)))))
     
                  ((res (qual nu int (and (@ <= begin nu) (@ < nu end))))
                  (dummy (qual nu (array int) (and 
                      (@ =[] nu arr)
                      (@ = (@ len nu) (@ len arr))
                      (forall ((i int)) (-> (and (@ <= begin i) (@ < i end)) (@ <= (@ get-array nu res) (@ get-array nu i)))))))))
       :qset (Q (nu int () (@ <= (the int 0) nu)) (nu int ((* int)) (@ <= * nu)) (nu int ((* int)) (@ < * nu)))
       :qset (QI i (nu (array int) ((* int)) (@ <= * i))
                   (nu (array int) ((* int)) (@ < i *)))
       :qset (QE i (nu (array int) ((* int)) (@ <= (@ get-array nu *) (@ get-array nu i))))
       :qset (QII i j (nu (array int) () (@ <= i j))
                      (nu (array int) ((* int)) (@ < i *))
                      (nu (array int) ((* int)) (@ <= * j))
                      (nu (array int) ((* int)) (@ < j *)))
       :qset (QEE i j (nu (array int) () (@ <= (@ get-array nu i) (@ get-array nu j))))
       :qset (QLen (nu (array int) ((* int)) (@ <= * (@ len nu))) (nu (array int) ((* (array int))) (@ = (@ len nu) (@ len *)))))



(define selsort
    ((arr (qual nu (array int) true)))
    ((res (qual nu (array int) (and 
            (@ = (@ len nu) (@ len arr))
            (forall ((i int) (j int))
                (-> (and (@ <= (the int 0) i) (@ <= i j) (@ < j (@ len nu))) (@ <= (@ get-array nu i) (@ get-array nu j)))))
    
    )))

    (declare (assertion
        (precd true)
        (postcd 
            (forall ((i int) (j int))
                (-> (and (@ <= (the int 0) i) (@ <= i j) (@ < j (@ len res))) (@ <= (@ get-array res i) (@ get-array res j)))))))
    
    (letfun (
      (outer-loop
        ((k (qual nu int (@ <= (the int 0) nu)))
         (res_in (qual nu (array int) (and 
              (@ = (@ len nu) (@ len arr))
              (@ <= k (@ len nu))
              (forall ((i int) (j int))
                (-> (and (@ <= (the int 0) i) (@ < i k) (@ <= k j) (@ < j (@ len nu))) (@ <= (@ get-array nu i) (@ get-array nu j))))
              (forall ((i int) (j int))
                (-> (and (@ <= (the int 0) i) (@ <= i j) (@ < j k)) (@ <= (@ get-array nu i) (@ get-array nu j))))
         ))))
        ((res_out (qual nu (array int) (and 
            (@ = (@ len nu) (@ len arr))
            (forall ((i int) (j int))
                (-> (and (@ <= (the int 0) i) (@ <= i j) (@ < j (@ len nu))) (@ <= (@ get-array nu i) (@ get-array nu j)))))
    
        )))
        
        (declare (assertion (precd false) (postcd true)))
        
        (let ((lres int)) (@ len res_in)
        (let ((lres1 int)) (@ - lres (the int 1))
        (let ((b bool)) (@ < k lres1)
           (case b (
             (true 
                (let ((min int) (dummy (array int))) (@ minimum k lres res_in)
                (let ((res_min int)) (@ get-array res_in min)
                (let ((res_k int)) (@ get-array res_in k)
                (let ((res1 (array int))) (@ set-array res_in k res_min)
                (let ((res2 (array int))) (@ set-array res1 min res_k)
                (let ((k1 int)) (@ + k (the int 1)) (@ outer-loop k1 res2))
              ))))))
             (false res_in)))))))
             
      )
      
    (@ outer-loop (the int 0) arr)))
       
       
