(verification-unit selsort :external
  (set-array
    ((xs (array int))
      (i (qual nu int (and (@ <= (the int 0) nu) (@ < nu (@ len xs)))))
      (nv int))
    (
      (res
        (qual nu (array int)
          (and (@ =[] nu (@ set-array xs i nv)) (@ = (@ len nu) (@ len xs)))))))
  :external
  (get-array
    ((xs (array int))
      (i (qual nu int (and (@ <= (the int 0) nu) (@ < nu (@ len xs))))))
    ((res (qual nu int (@ = nu (@ get-array xs i))))))
  :external
  (minimum
    ((begin (qual nu int (@ <= (the int 0) nu)))
      (end (qual nu int (@ < begin nu)))
      (arr (qual nu (array int) (@ <= end (@ len nu)))))
    ((res (qual nu int (and (@ <= begin nu) (@ < nu end))))
      (dummy
        (qual nu (array int)
          (and (@ =[] nu arr) (@ = (@ len nu) (@ len arr))
            (forall ((i int))
              (-> (and (@ <= begin i) (@ < i end))
                (@ <= (@ get-array nu res) (@ get-array nu i)))))))))
  :qset
  (Q (nu int () (@ <= (the int 0) nu)))
  :qset
  (QI i)
  :qset
  (QE i)
  :qset
  (QII i j (nu (array int) () (@ <= i j))
    (nu (array int) ((* int)) (@ < i *))
    (nu (array int) ((* int)) (@ < j *))
    (nu (array int) ((* int)) (@ <= * j)))
  :qset
  (QEE i j (nu (array int) () (@ <= (@ get-array nu i) (@ get-array nu j))))
  :qset
  (QLen (nu (array int) ((* (array int))) (@ = (@ len nu) (@ len *)))
    (nu (array int) ((* int)) (@ <= * (@ len nu))))
  :kappa
  (_kappa_outer-loop_k ((nu int) (arr (array int))) (Q (@ <= (the int 0) nu)))
  :mu
  (_mu_selsort_arr ((nu (array int))) (QI i) (QE i) (QII i j )
    (QEE i j)
    (QLen))
  :mu
  (_mu_outer-loop_res_in ((nu (array int)) (arr (array int)) (k int)) (QI i)
    (QE i)
    (QII i j (@ <= i j) (@ < i k) (@ < j k) (@ <= k j))
    (QEE i j (@ <= (@ get-array nu i) (@ get-array nu j)))
    (QLen (@ = (@ len nu) (@ len arr)) (@ <= k (@ len nu))))
  :mu
  (_mu_outer-loop_res_out
    ((nu (array int)) (arr (array int)) (k int) (res_in (array int)))
    (QI i)
    (QE i)
    (QII i j (@ <= i j))
    (QEE i j (@ <= (@ get-array nu i) (@ get-array nu j)))
    (QLen (@ = (@ len nu) (@ len arr))
      ))
  :mu
  (_mu_selsort_res ((nu (array int)) (arr (array int))) (QI i) (QE i)
    (QII i j (@ <= i j))
    (QEE i j (@ <= (@ get-array nu i) (@ get-array nu j)))
    (QLen (@ = (@ len nu) (@ len arr)))))
(define selsort ((arr (qual nu (array int) (@ _mu_selsort_arr nu))))
  ((res (qual nu (array int) (@ _mu_selsort_res nu arr))))
  (declare
    (assertion (precd true)
      (postcd
        (forall ((i int) (j int))
          (-> (and (@ <= (the int 0) i) (@ <= i j) (@ < j (@ len res)))
            (@ <= (@ get-array res i) (@ get-array res j)))))))
  (letfun
    (
      (outer-loop
        ((k (qual nu int (@ _kappa_outer-loop_k nu arr)))
          (res_in (qual nu (array int) (@ _mu_outer-loop_res_in nu arr k))))
        (
          (res_out
            (qual nu (array int) (@ _mu_outer-loop_res_out nu arr k res_in))))
        (declare (assertion (precd false) (postcd true)))
        (let ((lres int)) (@ len res_in)
          (let ((lres1 int)) (@ - lres (the int 1))
            (let ((b bool)) (@ < k lres1)
              (case b
                (
                  (true
                    (let ((min int) (dummy (array int)))
                      (@ minimum k lres res_in)
                      (let ((res_min int)) (@ get-array res_in min)
                        (let ((res_k int)) (@ get-array res_in k)
                          (let ((res1 (array int)))
                            (@ set-array res_in k res_min)
                            (let ((res2 (array int)))
                              (@ set-array res1 min res_k)
                              (let ((k1 int)) (@ + k (the int 1))
                                (@ outer-loop k1 res2))))))))(false res_in))))))))
    (@ outer-loop (the int 0) arr)))
