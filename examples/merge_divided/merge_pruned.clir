(verification-unit merge :external
  (set-array
    ((xs (array int))
      (i (qual nu int (and (@ <= (the int 0) nu) (@ < nu (@ len xs)))))
      (nv int))
    (
      (res
        (qual nu (array int)
          (and (@ =[] nu (@ set-array xs i nv)) (@ = (@ len nu) (@ len xs)))))))
  :external
  (get-array
    ((xs (array int))
      (i (qual nu int (and (@ <= (the int 0) nu) (@ < nu (@ len xs))))))
    ((res (qual nu int (@ = nu (@ get-array xs i))))))
  :external
  (copy
    ((source (array int)) (from (qual nu int (@ <= (the int 0) nu)))
      (length
        (qual nu int
          (and (@ <= (the int 0) nu) (@ <= (@ + from nu) (@ len source)))))
      (dest (array int))
      (dest_from
        (qual nu int
          (and (@ <= (the int 0) nu) (@ <= (@ + nu length) (@ len dest))))))
    (
      (res
        (qual nu (array int)
          (and (@ = (@ len nu) (@ len dest))
            (forall ((i int))
              (-> (and (@ <= (the int 0) i) (@ < i dest_from))
                (@ = (@ get-array nu i) (@ get-array dest i))))
            (forall ((i int))
              (-> (and (@ <= (@ + dest_from length) i) (@ < i (@ len nu)))
                (@ = (@ get-array nu i) (@ get-array dest i))))
            (forall ((i int) (j int))
              (->
                (and (@ <= from i) (@ < i (@ + from length))
                  (@ <= dest_from j)
                  (@ < j (@ + dest_from length))
                  (@ = (@ - i from) (@ - j dest_from)))
                (@ = (@ get-array nu j) (@ get-array source i)))))))))
  :qset
  (Q (nu int () (@ <= (the int 0) nu)) (nu int ((* int)) (@ <= * nu))
    (nu int ((* int)) (@ <= nu *)))
  :qset
  (QI i)
  :qset
  (QE i)
  :qset
  (QII i j (nu (array int) () (@ <= i j))
    (nu (array int) ((* int)) (@ <= * i))
    (nu (array int) ((* int)) (@ < i *))
    (nu (array int) ((* int)) (@ <= * j))
    (nu (array int) ((* int)) (@ < j *)))
  :qset
  (QEE i j (nu (array int) () (@ <= (@ get-array nu i) (@ get-array nu j)))
    (nu (array int) ((* (array int)))
      (@ <= (@ get-array nu i) (@ get-array * j))))
  :qset
  (QLen (nu (array int) ((* int)) (@ <= * (@ len nu)))
    (nu (array int) ((* (array int))) (@ = (@ len *) (@ len nu))))
  :kappa
  (_kappa_merge_a ((nu int)) (Q (@ <= (the int 0) nu)))
  :kappa
  (_kappa_merge_m ((nu int) (a int))
    (Q (@ <= a nu)))
  :kappa
  (_kappa_merge_b ((nu int) (a int) (m int))
    (Q (@ <= m nu)))
  :kappa
  (_kappa_f1_ca ((nu int) (a int) (m int) (b int) (arr (array int)))
    (Q (@ <= a nu)
      (@ <= nu m)
      ))
  :kappa
  (_kappa_f1_cm ((nu int) (a int) (m int) (b int) (arr (array int)) (ca int))
    (Q (@ <= m nu) 
      (@ <= nu b)
      ))
  :mu
  (_mu_merge_arr ((nu (array int)) (a int) (m int) (b int)) (QI i) (QE i)
    (QII i j (@ <= i j) (@ <= a i) (@ <= m i)
      (@ < j m)
      (@ < j b))
    (QEE i j (@ <= (@ get-array nu i) (@ get-array nu j)))
    (QLen (@ <= b (@ len nu))))
  :mu
  (_mu_f1_res_in
    ((nu (array int)) (a int) (m int) (b int) (arr (array int)) (ca int)
      (cm int)
      (k int))
    (QI i)
    (QE i)
    (QII i j (@ <= i j) (@ <= a i)
      (@ < i k)
      (@ <= ca j)
      (@ <= cm j)
      (@ < j m)
      (@ < j b)
      (@ < j k))
    (QEE i j (@ <= (@ get-array nu i) (@ get-array nu j))
      (@ <= (@ get-array nu i) (@ get-array arr j)))
    (QLen 
      (@ = (@ len arr) (@ len nu))))
  :mu
  (_mu_f1_res_out
    ((nu (array int)) (a int) (m int) (b int) (arr (array int)) (ca int)
      (cm int)
      (k int)
      (res_in (array int)))
    (QI i)
    (QE i)
    (QII i j (@ <= i j) (@ <= a i) 
      (@ < j b)
      )
    (QEE i j (@ <= (@ get-array nu i) (@ get-array nu j))
      )
    (QLen 
      (@ = (@ len arr) (@ len nu))
      ))
  :mu
  (_mu_merge_res ((nu (array int)) (a int) (m int) (b int) (arr (array int)))
    (QI i)
    (QE i)
    (QII i j (@ <= i j) (@ <= a i)
      (@ < j b))
    (QEE i j (@ <= (@ get-array nu i) (@ get-array nu j))
      )
    (QLen 
      (@ = (@ len arr) (@ len nu)))))
(define merge
  ((a (qual nu int (@ <= (the int 0) nu)))
    (m (qual nu int (@ <= a nu)))
    (b (qual nu int (@ <= m nu)))
    (arr (qual nu (array int) (@ _mu_merge_arr nu a m b))))
  ((res (qual nu (array int) (@ _mu_merge_res nu a m b arr))))
  (declare
    (assertion
      (precd
        (and (@ <= (the int 0) a) (@ <= a m) (@ <= m b) (@ <= b (@ len arr))
          (forall ((i int) (j int))
            (-> (and (@ <= a i) (@ <= i j) (@ < j m))
              (@ <= (@ get-array arr i) (@ get-array arr j))))
          (forall ((i int) (j int))
            (-> (and (@ <= m i) (@ <= i j) (@ < j b))
              (@ <= (@ get-array arr i) (@ get-array arr j))))))
      (postcd
        (and (@ = (@ len res) (@ len arr))
          (forall ((i int) (j int))
            (-> (and (@ <= a i) (@ <= i j) (@ < j b))
              (@ <= (@ get-array res i) (@ get-array res j))))))))
  (letfun
    (
      (f1
        ((ca (qual nu int (and (@ <= a nu) (@ <= nu m))))
          (cm (qual nu int (and (@ <= m nu) (@ <= nu b))))
          (k (qual nu int (@ = (@ + nu m) (@ + ca cm))))
          (res_in (qual nu (array int) (@ _mu_f1_res_in nu a m b arr ca cm k))))
        (
          (res_out
            (qual nu (array int)
              (@ _mu_f1_res_out nu a m b arr ca cm k res_in))))
        (declare (assertion (precd false) (postcd true)))
        (let ((b1 bool)) (@ < ca m)
          (let ((b2 bool)) (@ < cm b)
            (case b1
              (
                (true
                  (case b2
                    (
                      (true
                        (let ((arr_ca int)) (@ get-array arr ca)
                          (let ((arr_cm int)) (@ get-array arr cm)
                            (let ((b3 bool)) (@ <= arr_ca arr_cm)
                              (case b3
                                (
                                  (true
                                    (let ((resp (array int)))
                                      (@ set-array res_in k arr_ca)
                                      (let ((cap int)) (@ + ca (the int 1))
                                        (let ((kp int)) (@ + k (the int 1))
                                          (@ f1 cap cm kp resp)))))
                                  (false
                                    (let ((resp (array int)))
                                      (@ set-array res_in k arr_cm)
                                      (let ((cmp int)) (@ + cm (the int 1))
                                        (let ((kp int)) (@ + k (the int 1))
                                          (@ f1 ca cmp kp resp)))))))))))
                      (false
                        (let ((m_ca int)) (@ - m ca)
                          (@ copy arr ca m_ca res_in k))))))
                (false
                  (let ((b_cm int)) (@ - b cm) (@ copy arr cm b_cm res_in k)))))))))
    (@ f1 a m a arr)))
