(verification-unit partition :external
  (set-array
    ((xs (array int))
      (i (qual nu int (and (@ <= (the int 0) nu) (@ < nu (@ len xs)))))
      (nv int))
    (
      (res
        (qual nu (array int)
          (and (@ =[] nu (@ set-array xs i nv)) (@ = (@ len nu) (@ len xs)))))))
  :external
  (get-array
    ((xs (array int))
      (i (qual nu int (and (@ <= (the int 0) nu) (@ < nu (@ len xs))))))
    ((res (qual nu int (@ = nu (@ get-array xs i))))))
  :qset
  (Q (nu int () (@ <= (the int 0) nu)) (nu int ((* int)) (@ <= * nu))
    (nu int ((* int)) (@ < * nu)))
  :qset
  (QI i (nu (array int) ((* int)) (@ <= * i))
    (nu (array int) ((* int)) (@ < i *)))
  :qset
  (QE i
    (nu (array int) ((* int)) (@ <= (@ get-array nu *) (@ get-array nu i))))
  :qset
  (QII i j (nu (array int) () (@ <= (the int 0) i))
    (nu (array int) () (@ <= i j))
    (nu (array int) ((* int)) (@ < i *))
    (nu (array int) ((* int)) (@ <= * j))
    (nu (array int) ((* int)) (@ < j *)))
  :qset
  (QEE i j (nu (array int) () (@ <= (@ get-array nu i) (@ get-array nu j))))
  :qset
  (QLen (nu (array int) ((* int)) (@ <= * (@ len nu)))
    (nu (array int) ((* (array int))) (@ = (@ len nu) (@ len *))))
  :kappa
  (_kappa_outer-loop_k ((nu int) (arr (array int))) (Q (@ <= (the int 0) nu)))
  :kappa
  (_kappa_inner-loop_k ((nu int) (arr (array int))) (Q (@ <= (the int 0) nu)))
  :kappa
  (_kappa_inner-loop_min ((nu int) (arr (array int)) (k int))
    (Q (@ <= k nu)))
  :kappa
  (_kappa_inner-loop_l ((nu int) (arr (array int)) (k int) (min int))
    (Q (@ < min nu)))
  :mu
  (_mu_selsort_arr ((nu (array int))) (QI i) (QE i)
    (QII i j)
    (QEE i j)
    (QLen))
  :mu
  (_mu_outer-loop_res_in ((nu (array int)) (arr (array int)) (k int))
    (QI i)
    (QE i)
    (QII i j (@ <= i j) (@ < i k) (@ <= k j)
      (@ < j k))
    (QEE i j (@ <= (@ get-array nu i) (@ get-array nu j)))
    (QLen (@ <= k (@ len nu)) (@ = (@ len nu) (@ len arr))))
  :mu
  (_mu_outer-loop_res_out
    ((nu (array int)) (arr (array int)) (k int) (res_in (array int)))
    (QI i)
    (QE i)
    (QII i j (@ <= i j))
    (QEE i j (@ <= (@ get-array nu i) (@ get-array nu j)))
    (QLen  (@ = (@ len nu) (@ len arr))))
  :mu
  (_mu_inner-loop_res_in
    ((nu (array int)) (arr (array int)) (k int) (min int) (l int))
    (QI i (@ <= k i) (@ < i l))
    (QE i 
      (@ <= (@ get-array nu min) (@ get-array nu i))
      )
    (QII i j (@ <= i j) (@ < i k) 
      (@ <= k j)
      (@ < j k))
    (QEE i j (@ <= (@ get-array nu i) (@ get-array nu j)))
    (QLen (@ <= l (@ len nu))
      (@ = (@ len nu) (@ len arr))))
  :mu
  (_mu_inner-loop_res_out
    ((nu (array int)) (arr (array int)) (k int) (min int) (l int)
      (res_in (array int)))
    (QI i)
    (QE i)
    (QII i j (@ <= i j))
    (QEE i j (@ <= (@ get-array nu i) (@ get-array nu j)))
    (QLen 
      (@ = (@ len nu) (@ len arr))
      ))
  :mu
  (_mu_selsort_res ((nu (array int)) (arr (array int))) (QI i) (QE i)
    (QII i j (@ <= i j))
    (QEE i j (@ <= (@ get-array nu i) (@ get-array nu j)))
    (QLen )))
(define selsort ((arr (qual nu (array int) (@ _mu_selsort_arr nu))))
  ((res (qual nu (array int) (@ _mu_selsort_res nu arr))))
  (declare
    (assertion (precd true)
      (postcd
        (forall ((i int) (j int))
          (-> (and (@ <= (the int 0) i) (@ <= i j) (@ < j (@ len res)))
            (@ <= (@ get-array res i) (@ get-array res j)))))))
  (letfun
    (
      (outer-loop
        ((k (qual nu int (@ _kappa_outer-loop_k nu arr)))
          (res_in (qual nu (array int) (@ _mu_outer-loop_res_in nu arr k))))
        (
          (res_out
            (qual nu (array int) (@ _mu_outer-loop_res_out nu arr k res_in))))
        (declare (assertion (precd false) (postcd true)))
        (let ((lres int)) (@ len res_in)
          (let ((lres1 int)) (@ - lres (the int 1))
            (let ((b bool)) (@ < k lres1)
              (case b
                (
                  (true
                    (let ((k1 int)) (@ + k (the int 1))
                      (@ inner-loop k k k1 res_in)))(false res_in)))))))
      (inner-loop
        ((k (qual nu int (@ _kappa_inner-loop_k nu arr)))
          (min (qual nu int (@ _kappa_inner-loop_min nu arr k)))
          (l (qual nu int (@ _kappa_inner-loop_l nu arr k min)))
          (res_in
            (qual nu (array int) (@ _mu_inner-loop_res_in nu arr k min l))))
        (
          (res_out
            (qual nu (array int)
              (@ _mu_inner-loop_res_out nu arr k min l res_in))))
        (declare (assertion (precd false) (postcd true)))
        (let ((lres int)) (@ len res_in)
          (let ((b1 bool)) (@ < l lres)
            (case b1
              (
                (true
                  (let ((res_l int)) (@ get-array res_in l)
                    (let ((res_min int)) (@ get-array res_in min)
                      (let ((b2 bool)) (@ < res_l res_min)
                        (let ((l1 int)) (@ + l (the int 1))
                          (case b2
                            ((true (@ inner-loop k l l1 res_in))
                              (false (@ inner-loop k min l1 res_in)))))))))
                (false
                  (let ((res_min int)) (@ get-array res_in min)
                    (let ((res_k int)) (@ get-array res_in k)
                      (let ((resp1 (array int)))
                        (@ set-array res_in k res_min)
                        (let ((resp2 (array int)))
                          (@ set-array resp1 min res_k)
                          (let ((k1 int)) (@ + k (the int 1))
                            (@ outer-loop k1 resp2)))))))))))))
    (@ outer-loop (the int 0) arr)))
