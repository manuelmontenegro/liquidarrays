(verification-unit insert :external
  (set-array
    ((xs (array int))
      (i (qual nu int (and (@ <= (the int 0) nu) (@ < nu (@ len xs)))))
      (nv int))
    (
      (res
        (qual nu (array int)
          (and (@ =[] nu (@ set-array xs i nv)) (@ = (@ len nu) (@ len xs)))))))
  :external
  (get-array
    ((xs (array int))
      (i (qual nu int (and (@ <= (the int 0) nu) (@ < nu (@ len xs))))))
    ((res (qual nu int (@ = nu (@ get-array xs i))))))
  :qset
  (Q (nu int () (@ <= (the int 0) nu)) (nu int ((* int)) (@ <= * nu)))
  :qset
  (QI i)
  :qset
  (QE i)
  :qset
  (QII i j (nu (array int) () (@ <= i j))
    (nu (array int) ((* int)) (@ <= j *))
    (nu (array int) ((* int)) (@ <= * i))
    (nu (array int) ((* int)) (@ < i *))
    (nu (array int) ((* int)) (@ < * j))
    (nu (array int) ((* int)) (@ < j *)))
  :qset
  (QEE i j (nu (array int) () (@ <= (@ get-array nu i) (@ get-array nu j))))
  :qset
  (QLen (nu (array int) ((* int)) (@ < * (@ len nu))))
  :kappa
  (_kappa_insert_k ((nu int)) (Q (@ <= (the int 0) nu)))
  :kappa
  (_kappa_f1_m ((nu int) (k int) (a (array int)))
    (Q (@ <= (the int 0) nu) (@ <= k nu)))
  :kappa
  (_kappa_f1_k ((nu int) (k int) (a (array int)) (m int))
    (Q (@ <= (the int 0) nu) (@ <= k nu) (@ <= m nu)))
  :mu
  (_mu_insert_a ((nu (array int)) (k int)) (QI i) (QE i)
    (QII i j (@ <= i j) (@ < j k))
    (QEE i j (@ <= (@ get-array nu i) (@ get-array nu j)))
    (QLen (@ < k (@ len nu))))
  :mu
  (_mu_f1_a ((nu (array int)) (m int) (k int)) (QI i) (QE i)
    (QII i j (@ <= i j) (@ < j m) (@ < m j) (@ <= j k) (@ <= m i) (@ < i m))
    (QEE i j (@ <= (@ get-array nu i) (@ get-array nu j)))
    (QLen (@ < k (@ len nu))))
  :mu
  (_mu_f1_res ((nu (array int)) (m int) (k int)) (QI i)
    (QE i)
    (QII i j (@ <= i j) (@ <= j k))
    (QEE i j (@ <= (@ get-array nu i) (@ get-array nu j)))
    (QLen (@ < k (@ len nu))))
  :mu
  (_mu_insert_res ((nu (array int)) (k int) (a (array int))) (QI i) (QE i)
    (QII i j (@ <= i j) (@ <= j k))
    (QEE i j (@ <= (@ get-array nu i) (@ get-array nu j)))
    (QLen (@ < k (@ len nu)))))
(define insert
  ((k (qual nu int (@ _kappa_insert_k nu)))
    (a (qual nu (array int) (@ _mu_insert_a nu k))))
  ((res (qual nu (array int) (@ _mu_insert_res nu k a))))
  (declare
    (assertion
      (precd
        (and (@ <= (the int 0) k) (@ < k (@ len a))
          (forall ((i int) (j int))
            (-> (and (@ <= (the int 0) i) (@ <= i j) (@ < j k))
              (@ <= (@ get-array a i) (@ get-array a j))))))
      (postcd
        (forall ((i int) (j int))
          (->
            (and (@ <= (the int 0) i) (@ <= i j) (@ <= j k)
              (@ < k (@ len res)))
            (@ <= (@ get-array res i) (@ get-array res j)))))))
  (letfun
    (
      (f1
        ((m (qual nu int (@ _kappa_f1_m nu k a)))
          (k (qual nu int (@ _kappa_f1_k nu k a m)))
          (a (qual nu (array int) (@ _mu_f1_a nu m k))))
        ((res (qual nu (array int) (@ _mu_f1_res nu m k))))
        (declare (assertion (precd false) (postcd true)))
        (let ((b1 bool)) (@ > m (the int 0))
          (case b1
            (
              (true
                (let ((m1 int)) (@ - m (the int 1))
                  (let ((x1 int)) (@ get-array a m1)
                    (let ((x2 int)) (@ get-array a m)
                      (let ((b2 bool)) (@ > x1 x2)
                        (case b2
                          (
                            (true
                              (let ((a1 (array int))) (@ set-array a m1 x2)
                                (let ((a2 (array int))) (@ set-array a1 m x1)
                                  (@ f1 m1 k a2))))(false a))))))))(false a))))))
    (@ f1 k k a)))
